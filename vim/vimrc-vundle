" vundle插件
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'The-NERD-tree'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/syntastic'
Plugin 'Raimondi/delimitMate'
Plugin 'Chiel92/vim-autoformat'
Plugin 'tomasr/molokai'
Plugin 'fatih/vim-go'
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" 基本配置
set nobackup
set backspace=2

" 编码配置
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,cp936,big5,latin1

" 界面配置
set nu
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
syntax enable
set cursorline
set cursorcolumn
" set nowrap

" 搜索配置
set incsearch
set hlsearch

" 主题颜色配置
colorscheme molokai

" 快捷键配置
let mapleader=";"

" NERDTree插件
nmap <Leader>t :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" syntastic插件
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" autoformat插件
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
" 使用命令而非自动触发，避免有些文件操作卡住导致响应很慢
" au BufWrite *.c,*.h,*.hpp,*.cpp :Autoformat
" au BufWrite * :Autoformat

" rust.vim 插件
let g:rustfmt_autosave = 1

" yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" json format
" autocmd BufWrite *.json :%!jq
" nmap <Leader>j :%!jq<CR>

" 当新建 .h .c .hpp .cpp .mk .sh等文件时自动调用SetTitle 函数
autocmd BufNewFile *.[ch],*.hpp,*.cpp,Makefile,*.mk,*.sh exec ":call SetTitle()"
" 加入注释
func SetComment()
    call setline(1,"/*================================================================")
    call append(line("."),   "*   Copyright (C) ".strftime("%Y")." sypeng. All rights reserved.")
    call append(line(".")+1, "*   ")
    call append(line(".")+2, "*   文件名称：".expand("%:t"))
    call append(line(".")+3, "*   创 建 者：sypeng, psyucc@163.com")
    call append(line(".")+4, "*   创建日期：".strftime("%Y年%m月%d日"))
    call append(line(".")+5, "*   描    述：")
    call append(line(".")+6, "*")
    call append(line(".")+7, "================================================================*/")
    call append(line(".")+8, "")
    call append(line(".")+9, "")
endfunc
" 加入shell,Makefile注释
func SetComment_sh()
    call setline(3, "#================================================================")
    call setline(4, "#   Copyright (C) ".strftime("%Y")." sypeng. All rights reserved.")
    call setline(5, "#   ")
    call setline(6, "#   文件名称：".expand("%:t"))
    call setline(7, "#   创 建 者：sypeng, psyucc@163.com")
    call setline(8, "#   创建日期：".strftime("%Y年%m月%d日"))
    call setline(9, "#   描    述：")
    call setline(10, "#")
    call setline(11, "#================================================================")
    call setline(12, "")
    call setline(13, "")
endfunc
" 定义函数SetTitle，自动插入文件头
func SetTitle()
    if &filetype == 'make'
        call setline(1,"")
        call setline(2,"")
        call SetComment_sh()
    elseif &filetype == 'sh'
        call setline(1,"#!/bin/sh")
        call setline(2,"")
        call SetComment_sh()
    else
        call SetComment()
        if expand("%:e") == 'hpp'
            call append(line(".")+10, "#ifndef _".toupper(expand("%:t:r"))."_HPP_")
            call append(line(".")+11, "#define _".toupper(expand("%:t:r"))."_HPP_")
            call append(line(".")+12, "#ifdef __cplusplus")
            call append(line(".")+13, "extern \"C\"")
            call append(line(".")+14, "{")
            call append(line(".")+15, "#endif")
            call append(line(".")+16, "")
            call append(line(".")+17, "#ifdef __cplusplus")
            call append(line(".")+18, "}")
            call append(line(".")+19, "#endif")
            call append(line(".")+20, "")
            call append(line(".")+21, "")
            call append(line(".")+22, "#endif // _".toupper(expand("%:t:r"))."_HPP_")
            call append(line(".")+23, "")
        elseif expand("%:e") == 'h'
            call append(line(".")+10, "#pragma once")
            call append(line(".")+11, "#ifndef _".toupper(expand("%:t:r"))."_H_")
            call append(line(".")+12, "#define _".toupper(expand("%:t:r"))."_H_")
            call append(line(".")+13, "")
            call append(line(".")+14, "")
            call append(line(".")+15, "#endif // _".toupper(expand("%:t:r"))."_H_")
            call append(line(".")+16, "")
        elseif &filetype == 'c'
            call append(line(".")+10,"#include \"".expand("%:t:r").".h\"")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
        elseif &filetype == 'cpp'
            call append(line(".")+10, "#include \"".expand("%:t:r").".hpp\"")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
        endif
    endif
endfunc
